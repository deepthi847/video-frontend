{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"E:\\\\Documents\\\\Downloads\\\\insta-reels-master\\\\insta-reels-master\\\\App\\\\index.js\";\n\nimport \"react-native-gesture-handler\";\nimport React, { useState, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport NetInfo from \"@react-native-community/netinfo\";\nimport Routes from \"./Routes\";\nimport { NoConnection } from \"./Component\";\nimport CommonStyle from \"./Theme/CommonStyle\";\nimport { AppContextProvider } from \"./Context\";\n\nvar App = function App(props) {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isConnected = _useState2[0],\n      setIsConnected = _useState2[1];\n\n  var netInfoSubscription = null;\n  useEffect(function () {\n    manageConnection();\n    return function () {\n      if (netInfoSubscription) {\n        netInfoSubscription();\n      }\n    };\n  }, []);\n\n  var manageConnection = function manageConnection() {\n    retryConnection();\n    netInfoSubscription = NetInfo.addEventListener(handleConnectivityChange);\n  };\n\n  var handleConnectivityChange = function handleConnectivityChange(info) {\n    if (info.type === \"none\" || !info.isConnected) {\n      setIsConnected(false);\n    } else {\n      setIsConnected(true);\n    }\n  };\n\n  var retryConnection = function retryConnection() {\n    NetInfo.fetch().then(handleConnectivityChange);\n  };\n\n  return React.createElement(AppContextProvider, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: CommonStyle.flexContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, React.createElement(Routes, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }), !isConnected && React.createElement(NoConnection, {\n    retryConnection: retryConnection,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 27\n    }\n  }) || null));\n};\n\nexport default App;","map":{"version":3,"names":["React","useState","useEffect","NetInfo","Routes","NoConnection","CommonStyle","AppContextProvider","App","props","isConnected","setIsConnected","netInfoSubscription","manageConnection","retryConnection","addEventListener","handleConnectivityChange","info","type","fetch","then","flexContainer"],"sources":["E:/Documents/Downloads/insta-reels-master/insta-reels-master/App/index.js"],"sourcesContent":["import \"react-native-gesture-handler\";\nimport React, { useState, useEffect } from \"react\";\nimport { View } from \"react-native\";\nimport NetInfo from \"@react-native-community/netinfo\";\nimport Routes from \"./Routes\";\nimport { NoConnection } from \"./Component\";\nimport CommonStyle from \"./Theme/CommonStyle\";\nimport { AppContextProvider } from \"./Context\";\n\nconst App = (props) => {\n  const [isConnected, setIsConnected] = useState(true);\n  let netInfoSubscription = null;\n\n  useEffect(() => {\n    manageConnection();\n    return () => {\n      if (netInfoSubscription) {\n        netInfoSubscription();\n      }\n    };\n  }, []);\n\n  const manageConnection = () => {\n    retryConnection();\n    netInfoSubscription = NetInfo.addEventListener(handleConnectivityChange);\n  };\n\n  // Managed internet connection\n  const handleConnectivityChange = (info) => {\n    if (info.type === \"none\" || !info.isConnected) {\n      setIsConnected(false);\n    } else {\n      setIsConnected(true);\n    }\n  };\n\n  // Check network connection\n  const retryConnection = () => {\n    NetInfo.fetch().then(handleConnectivityChange);\n  };\n\n  return (\n    <AppContextProvider>\n      <View style={CommonStyle.flexContainer}>\n        <Routes />\n        {(!isConnected && <NoConnection retryConnection={retryConnection} />) ||\n          null}\n      </View>\n    </AppContextProvider>\n  );\n};\n\nexport default App;\n"],"mappings":";;;;;AAAA,OAAO,8BAAP;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,OAAOC,OAAP,MAAoB,iCAApB;AACA,OAAOC,MAAP;AACA,SAASC,YAAT;AACA,OAAOC,WAAP;AACA,SAASC,kBAAT;;AAEA,IAAMC,GAAG,GAAG,SAANA,GAAM,CAACC,KAAD,EAAW;EACrB,gBAAsCR,QAAQ,CAAC,IAAD,CAA9C;EAAA;EAAA,IAAOS,WAAP;EAAA,IAAoBC,cAApB;;EACA,IAAIC,mBAAmB,GAAG,IAA1B;EAEAV,SAAS,CAAC,YAAM;IACdW,gBAAgB;IAChB,OAAO,YAAM;MACX,IAAID,mBAAJ,EAAyB;QACvBA,mBAAmB;MACpB;IACF,CAJD;EAKD,CAPQ,EAON,EAPM,CAAT;;EASA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;IAC7BC,eAAe;IACfF,mBAAmB,GAAGT,OAAO,CAACY,gBAAR,CAAyBC,wBAAzB,CAAtB;EACD,CAHD;;EAMA,IAAMA,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACC,IAAD,EAAU;IACzC,IAAIA,IAAI,CAACC,IAAL,KAAc,MAAd,IAAwB,CAACD,IAAI,CAACP,WAAlC,EAA+C;MAC7CC,cAAc,CAAC,KAAD,CAAd;IACD,CAFD,MAEO;MACLA,cAAc,CAAC,IAAD,CAAd;IACD;EACF,CAND;;EASA,IAAMG,eAAe,GAAG,SAAlBA,eAAkB,GAAM;IAC5BX,OAAO,CAACgB,KAAR,GAAgBC,IAAhB,CAAqBJ,wBAArB;EACD,CAFD;;EAIA,OACE,oBAAC,kBAAD;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACE,oBAAC,IAAD;IAAM,KAAK,EAAEV,WAAW,CAACe,aAAzB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACE,oBAAC,MAAD;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EADF,EAEI,CAACX,WAAD,IAAgB,oBAAC,YAAD;IAAc,eAAe,EAAEI,eAA/B;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAjB,IACC,IAHJ,CADF,CADF;AASD,CAzCD;;AA2CA,eAAeN,GAAf"},"metadata":{},"sourceType":"module"}